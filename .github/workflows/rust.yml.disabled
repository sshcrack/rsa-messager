name: Rust

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-util:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output: rsa-msg
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-20.04
            output: rsa-msg
          - target: x86_64-apple-darwin
            os: macos-latest
            output: rsa-msg
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            output: rsa-msg.exe

    steps:
    - uses: actions/checkout@v2
    - uses: FranzDiebold/github-env-vars-action@v1.2.1

    - name: Configure toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable
        target:  ${{ matrix.target }}
        override: true

    - name: Configure caching
      uses: actions/cache@v2
      # Caching disabled on macos due to https://github.com/actions/cache/issues/403
      if: ${{ matrix.os != 'macos-latest' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
        path: |
          ${{ env.HOME }}/.cargo
          target

    - name: Install openssl (brew)
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install openssl

    - name: Install openssl (apt native)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' }}
      run: sudo apt install -y libssl-dev

    - name: Install openssl (armv7)
      if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
      run: sudo apt install -y libssl-dev

    - name: Install cross toolchain (armv7)
      if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
      run: sudo apt install gcc-arm-linux-gnueabihf

    - name: Enable cross compilation (armv7)
      if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
      run: |
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

    - name: Install openssl (vcpkg)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        vcpkg integrate install
        vcpkg install openssl:x64-windows-static
        echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows-static/" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Cache vcpkg
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
        path: $VCPKG_DIRECTORY
# old script dunno masybe with run it works
#    - name: Build release
#      working-directory: client
#      uses: actions-rs/cargo@v1.0.1
#      with:
#        use-cross: ${{ matrix.use_cross }}
#        command: build
#        args: --target ${{ matrix.target }} --release ${{ matrix.args }}

    - name: Build release
      working-directory: client
      run:
        cargo build --target ${{ matrix.target }} --release ${{ matrix.args }}

    - name: Copy / Rename utility
      run: |
        cp client/target/${{ matrix.target }}/release/${{ matrix.output }} ${{ matrix.output }}-${{ matrix.target }}
        tar -czvf rsa-msg-${{ matrix.target }}.tgz ${{ matrix.output }}-${{ matrix.target }}

    - name: Upload utility artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.output }}-${{ matrix.target }}
        path: ${{ matrix.output }}-${{ matrix.target }}

    - name: Upload utility binary to release
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: rsa-msg-${{ matrix.target }}.tgz
        asset_name: rsa-msg-${{ matrix.target }}.tgz
        tag: ${{ github.ref }}
        overwrite: true

  release:
    name: Create release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Release ${{ github.ref }}

